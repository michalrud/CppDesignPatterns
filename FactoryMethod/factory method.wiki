= factory method =

== problem ==

 * W zależności od okoliczności chcemy tworzyć różne obiekty
 * Klient musi podjąć decyzję o wyborze konkretnej typu obiektu

{{{plantuml
@startuml
class ObjectA {
 +performAction()
}
class ObjectB {
 +performAction()
}

Client --> ObjectA
Client --> ObjectB

@enduml
}}}

== rozwiązanie ==

 * Implementujemy w klasach wspólny interfejs
 * Tworzymy funkcję, która zwraca stworzony obiekt klasy wybranej na podstawie zdefiniowanych wewnątrz warunków

{{{plantuml
@startuml
class Client
class Object {
 {static} +Create()
 {abstract} +performAction()
}
Client-->Object

together {
    class ObjectA {
     +performAction()
    }
    class ObjectB {
     +performAction()
    }
}

ObjectA --|> Object
ObjectB --|> Object

@enduml
}}}

== podsumowanie ==

 * Podstawowe cechy
     * Pozwala ukryć przed klientem szczegóły tworzenia obiektu
     * Pozwala na łatwą zmianę klasy implementacyjnej bez zmiany kodu klientów
 * Przykładowe zastosowania
     * Wybranie biblioteki graficznej w zależności od używanego środowiska graficznego
     * wybranie wersji silnika renderującego w zależności od tego, która wersja DirectX jest wspierana przez wykryty sprzęt

