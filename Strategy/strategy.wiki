= strategy =

== problem ==

 * W zależności od okoliczności chcemy użyć jednej z kilku możliwych implementacji.

{{{plantuml
@startuml
class Fb {
 +postStatus()
}
class Twitter {
 +postStatus()
}
class Medium {
 +postStatus()
}

Client --> Fb
Client --> Twitter
Client --> Medium
@enduml
}}}

== rozwiązanie ==

 * Tworzymy klasę implementującą ten sam interfejs co klasy konkretnych implementacji
 * Metoda wywołująca akcję decyduje, którą z implementacji wywołać

{{{plantuml
@startuml
class Strategy {
 +postStatus()
}
class Fb {
 +postStatus()
}
class Twitter {
 +postStatus()
}
class Medium {
 +postStatus()
}

Client --> Strategy
Strategy <|.. Fb
Strategy <|.. Twitter
Strategy <|.. Medium
@enduml
}}}

== podsumowanie ==

 * Podstawowe cechy:
     * Klasa klienta nie ma pojęcia o istnieniu podrzędnych klas implementacyjnych
 * Przykłady:
     * Inteligentne dobieranie algorytmu w zależności od rodzaju danych wejściowych
     * Pozwala na łatwe mockowanie przykrywanej funkcjonalności

