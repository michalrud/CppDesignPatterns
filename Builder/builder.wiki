= builder =

== problem ==

 * Chcemy móc tworzyć różne rodzaje obiektów w ten sam sposób, jakby "od szablonu" 

{{{plantuml
@startuml
class DesktopPage {
 +addParagraph()
 +addHeader()
}
class MobilePage {
 +addParagraph()
 +addHeader()
}
Client --|> DesktopPage
Client --|> MobilePage
@enduml
}}}

== rozwiązanie ==

 * Należy stworzyć obiekt, który będzie w stanie skonfigurować każdy z tych obiektów w podobny sposób
 * Obiekt budowniczego powinien móc zwrócić stworzony i skonfigurowany obiekt

{{{plantuml
@startuml
class DesktopPage {
 +addParagraph()
 +addHeader()
}
class MobilePage {
 +addParagraph()
 +addHeader()
}
class Builder {
 +addTitledParagraph(title, text)
 +getObject()
}

Client --|> Builder
Builder --> DesktopPage
Builder --> MobilePage
@enduml
}}}

== podsumowanie ==

 * Podstawowe cechy:
     * Pozwala na ukrycie logiki wybierającej rodzaj obiektu przed klientem
     * Unifikuje sposób tworzenia i konfiguracji każdego rodzaju obiektu
 * Przykłady zastosowania:
     * Konstrukcja wiadomości w różnych formatach (XML, ProtoBuf...)
