= builder =

== problem ==

 * Obiekt, który chcemy tworzyć, wymaga skomplikowanej i niewygodnej inicjalizacji.

{{{plantuml
@startuml
Client -> String : new
activate String
Client -> String : prefix
Client -> String : append header
Client -> String : append paragraph
Client -> String : postfix
Client <- String
deactivate String
@enduml
}}}

== rozwiązanie ==

 * Należy stworzyć obiekt, który tworzenie i konfigurowanie obiektu klast docelowej robi w sposób uproszczony i wygodny dla klienta

{{{plantuml
@startuml

Client -> Builder : new
activate Builder
Builder -> String : new
activate String
Builder -> String : prefix
Client -> Builder : append header
Builder -> String : append header
Client -> Builder : append paragraph
Builder -> String : append paragraph
Client -> Builder : getPage
Builder -> String : append postfix
String -> Builder : content
deactivate String
Builder -> Client : page
deactivate Builder
@enduml
}}}

== podsumowanie ==

 * Podstawowe cechy:
     * Pozwala na ukrycie logiki tworzenia i konfiguracji obiektu przed klientem
 * Przykłady zastosowania:
     * Konstrukcja wiadomości w różnych formatach (XML, ProtoBuf...)
